import os
import SCons.Action
import SCons.Builder

### template for .sh script
shellScript = '''#!/bin/sh
# Autogenerated by SCons; do not edit!

${REPLACE-WRAPPER-SCRIPT}

export BASE_DIR=${REPLACE-BASEDIR}

export LD_LIBRARY_PATH=${REPLACE-LIBDIRS}:$LD_LIBRARY_PATH
export DYLD_LIBRARY_PATH=${REPLACE-LIBDIRS}:$DYLD_LIBRARY_PATH
export PATH=${REPLACE-PATHS}:$PATH

${REPLACE-PFILES}

export PYTHONPATH=${REPLACE-PYTHONPATHS}:$PYTHONPATH
export ROOTSYS=${REPLACE-ROOTSYS}

${REPLACE-WRAPPER-EXECUTE}
'''
# end template for .sh script

### template for .csh script
cshellScript = '''#!/bin/csh
# Autogenerated by SCons; do not edit!

${REPLACE-WRAPPER-SCRIPT}

setenv BASE_DIR ${REPLACE-BASEDIR}

if ($?LD_LIBRARY_PATH) then
  setenv LD_LIBRARY_PATH ${REPLACE-LIBDIRS}:$LD_LIBRARY_PATH
else
  setenv LD_LIBRARY_PATH ${REPLACE-LIBDIRS}
endif

if ($?DYLD_LIBRARY_PATH) then
  setenv DYLD_LIBRARY_PATH ${REPLACE-LIBDIRS}:$DYLD_LIBRARY_PATH
else
  setenv DYLD_LIBRARY_PATH ${REPLACE-LIBDIRS}
endif

if ($?PATH) then
  setenv PATH ${REPLACE-PATHS}:$PATH
else
  setenv PATH ${REPLACE-PATHS}
endif

${REPLACE-PFILES}

if ($?PYTHONPATH) then
  setenv PYTHONPATH ${REPLACE-PYTHONPATHS}:${PYTHONPATH}
else
  setenv PYTHONPATH ${REPLACE-PYTHONPATHS}
endif

setenv ROOTSYS ${REPLACE-ROOTSYS}

${REPLACE-WRAPPER-EXECUTE}
'''
# end template .csh script

# Substitutions for REPLACE-PFILES, depending on cirumstances
# .sh PFILES, wrapper 
shellWrapperPfiles = '''if [ ! -w $HOME/pfiles/. ]; then
  mkdir $HOME/pfiles
  if [ $? -ne 0 ]; then
    echo "Cannot create local pfiles directory $HOME/pfiles" >&2
    exit 3
  fi
fi
if [ "x$PFILES" != x ]; then
  syspfiles=`echo $PFILES | sed "s%.*;%%"`
  locpfiles=`echo $PFILES | sed "s%;*$syspfiles$%%"`
fi
if [ "x$locpfiles" = x ]; then
  locpfiles="$HOME/pfiles"
else
  locpfiles=`echo ":$locpfiles:" | sed "s%:$HOME/pfiles:%:%g" | sed "s%::*$%%"`
  locpfiles="$HOME/pfiles$locpfiles"
fi
if [ "x$syspfiles" = x ]; then
  syspfiles="$INST_DIR/syspfiles:$BASE_DIR/syspfiles"
else
  syspfiles=`echo ":$syspfiles:" | sed "s%:$INST_DIR/syspfiles:%:%g" | sed "s%::*$%%"`
  syspfiles=`echo ":$syspfiles:" | sed "s%:$BASE_DIR/syspfiles:%:%g" | sed "s%::*$%%"`
  syspfiles="$INST_DIR/syspfiles:$BASE_DIR/syspfiles$syspfiles"
fi
export PFILES="$locpfiles;$syspfiles"
'''

# .sh PFILES, setup
shellSetupPfiles = '''if [ ! -z "$PS1" ]; then
''' + shellWrapperPfiles + '''else
  if [ "x$PFILES" != x ]; then
    syspfiles=`echo $PFILES | sed "s%.*;%%"`
    locpfiles=`echo $PFILES | sed "s%;*$syspfiles$%%"`
  fi
  if [ "x$locpfiles" != x ]; then
    locpfiles=`echo "$locpfiles:" | sed "s%::*$%%"`
  fi
  if [ "x$syspfiles" = x ]; then
    syspfiles="$INST_DIR/syspfiles:$BASE_DIR/syspfiles"
  else
    syspfiles=`echo ":$syspfiles:" | sed "s%:$INST_DIR/syspfiles:%:%g" | sed "s%::*$%%"`
    syspfiles=`echo ":$syspfiles:" | sed "s%:$BASE_DIR/syspfiles:%:%g" | sed "s%::*$%%"`
    syspfiles="$INST_DIR/syspfiles:$BASE_DIR/syspfiles$syspfiles"
  fi
  if [ "x$locpfiles" = x ]; then
    export PFILES=";$syspfiles"
  else
    export PFILES="$locpfiles;$syspfiles"
  fi
fi
'''

# .csh PFILES, wrapper
# (currently not used by itself since we don't generate cshell wrappers)
cshellWrapperPfiles = '''if ( ! -d $HOME/pfiles ) then
  mkdir $HOME/pfiles
  if ($? != 0) then
    echo "Cannot create local pfiles directory $HOME/pfiles" >&2
    exit 3
  endif
endif

if ($?PFILES) then
  set syspfiles=`echo $PFILES | sed "s%.*;%%"`
  set locpfiles=`echo $PFILES | sed "s%;*$syspfiles"'$'"%%"`
endif

if ( $?locpfiles == 0) then
  set locpfiles="$HOME/pfiles"
else
  set locpfiles=`echo ":${locpfiles}:" | sed "s%:$HOME/pfiles:%:%g" | sed "s%::*"'$'"%%"`
  set locpfiles="$HOME/pfiles$locpfiles"
endif

if ($?syspfiles == 0) then
  set syspfiles="$INST_DIR/syspfiles:$BASE_DIR/syspfiles"
else
  set syspfiles=`echo ":${syspfiles}:" | sed "s%:$INST_DIR/syspfiles:%:%g" | sed "s%::*"'$'"%%"`
  set syspfiles=`echo ":${syspfiles}:" | sed "s%:$BASE_DIR/syspfiles:%:%g" | sed "s%::*"'$'"%%"`
  set syspfiles="$INST_DIR/syspfiles:$BASE_DIR/syspfiles$syspfiles"
endif
setenv PFILES "$locpfiles;$syspfiles"
'''
# .csh PFILES, setup
cshellSetupPfiles = '''if ("${interactive}" == "Y" ) then
''' + cshellWrapperPfiles + '''else
  if ($?PFILES) then
    set syspfiles=`echo $PFILES | sed "s%.*;%%"`
    set locpfiles=`echo $PFILES | sed "s%;*$syspfiles"'$'"%%"`
  endif
  if ($?locpfiles) then
    set locpfiles=`echo "${locpfiles}:"  | sed "s%::*"'$'"%%"`
  endif
  if ($?syspfiles == 0) then
    set syspfiles="$INST_DIR/syspfiles:$BASE_DIR/syspfiles"
  else
    set syspfiles=`echo ":${syspfiles}:" | sed "s%:$INST_DIR/syspfiles:%:%g" | sed "s%::*"'$'"%%"`
    set syspfiles=`echo ":${syspfiles}:" | sed "s%:$BASE_DIR/syspfiles:%:%g" | sed "s%::*"'$'"%%"`
    set syspfiles="$INST_DIR/syspfiles:$BASE_DIR/syspfiles$syspfiles"
  endif

  if ($?locpfiles == 0) then
    setenv PFILES "$syspfiles"
  else
    setenv PFILES "$locpfiles;$syspfiles"
  endif
endif
'''





### template for js (Windows)
jsScript = '''//Autogenerated by SCons; do not edit!
var shell = WScript.CreateObject("WScript.Shell");
var procEnv = shell.Environment("Process");
var sysEnv = shell.Environment("System");

${REPLACE-WRAPPER-SCRIPT}

procEnv("BASE_DIR") = ${REPLACE-BASEDIR}

procEnv("PATH") = ${REPLACE-PATHS} + ";" + procEnv.item("PATH");
procEnv("PATH") = procEnv.item("PATH") + ";" + ${REPLACE-LIBDIRS};

var fileSystem = WScript.CreateObject("Scripting.FileSystemObject");
if(!fileSystem.FolderExists(procEnv.item("HOMEDRIVE") + procEnv.item("HOMEPATH") + "\\pfiles")){
  fileSystem.CreateFolder(procEnv.item("HOMEDRIVE") + procEnv.item("HOMEPATH") + "\\pfiles");
}
locpfiles = ""
syspfiles = ""
if(procEnv.item("PFILES") != ""){
  locpfiles = procEnv.item("PFILES").substr(0, procEnv.item("PFILES").lastIndexOf("|"));
  if(locpfiles == ""){
    locpfiles = procEnv.item("PFILES");
  }
  syspfiles = procEnv.item("PFILES").replace(locpfiles, "");
  syspfiles = syspfiles.replace("|", "");
}
if(locpfiles == ""){
  locpfiles = procEnv.item("HOMEDRIVE") + procEnv.item("HOMEPATH") + "\\pfiles";
}
else{
  locpfiles = (";" + locpfiles + ";").replace(";" + procEnv.item("HOMEDRIVE") + procEnv.item("HOMEPATH"), ";");
  locpfiles = locpfiles.replace(";;", "");
  locpfiles = procEnv.item("HOMEDRIVE") + procEnv.item("HOMEPATH") + "\\\\pfiles" + locpfiles;
}
if(syspfiles = ""){
  syspfiles = procEnv.item("INST_DIR") + "\\\\syspfiles;" + procEnv.item("BASE_DIR") + "\\\\syspfiles";
}
else{
  syspfiles = (";" + syspfiles + ";").replace(";" + procEnv("INST_DIR") + "\\\\syspfiles", ";");
  syspfiles = (";" + syspfiles + ";").replace(";" + procEnv("BASE_DIR") + "\\\\syspfiles", ";");
  syspfiles = syspfiles.replace(";;", "");
  syspfiles = procEnv.item("INST_DIR") + "\\\\syspfiles;" + procEnv.item("BASE_DIR") + "\\\\syspfiles";
}
procEnv("PFILES") = locpfiles + ";" + syspfiles;
procEnv("ROOTSYS") = ${REPLACE-ROOTSYS}
procEnv("PYTHONPATH") = ${REPLACE-PYTHONPATHS} + ";" + procEnv.item("PYTHONPATH")

${REPLACE-WRAPPER-EXECUTE}
'''



# Helper functions to determine relative paths
# Obtained from http://code.activestate.com/recipes/208993/
def commonpath(l1, l2, common=[]):
    if len(l1) < 1: return (common, l1, l2)
    if len(l2) < 1: return (common, l1, l2)
    if l1[0] != l2[0]: return (common, l1, l2)
    return commonpath(l1[1:], l2[1:], common+[l1[0]])

def relpath(p1, p2):


    (common,l1,l2) = commonpath(p1.split(os.path.sep), p2.split(os.path.sep))
    p = []
    if len(l1) > 0:
        p = [ '../' * len(l1) ]
    p = p + l2
    return os.path.join( *p )

## Another helper to restore /nfs/slac... type paths
def resolve_nfs_path(path):
    tokens = path.split(":")
    for i in range(len(tokens)):
        if tokens[i].find('g.glast.'):
            tokens[i] = os.path.join('/nfs/farm/g/glast',
                                     tokens[i].split('g.glast.')[-1])
    return ":".join(tokens)

## Fill contents of wrapper scripts and setup script for an SCons installation
def fillScript(scriptFile, env, wrapper, script, executable):
    finalScript = script.get_contents()
    
    if env['PLATFORM'] == 'win32':
        separator = ' + ";" + '
        def replaceBackslash(a): return a.replace('\\', '\\\\')
        def replaceGlastExt(a):
            a = a.replace('"$GLAST_EXT', 'procEnv.item("GLAST_EXT") + "')
            a = a.replace('$GLAST_EXT"', '" + procEnv.item("GLAST_EXT")')
            a = a.replace('$GLAST_EXT', '" + procEnv.item("GLAST_EXT") + "')
            return a
        def replaceInstDir(a):
            a = a.replace('"$INST_DIR', 'procEnv.item("INST_DIR") + "')
            a = a.replace('$INST_DIR"', '" + procEnv.item("INST_DIR")')
            a = a.replace('$INST_DIR', '" + procEnv.item("INST_DIR") + "')
            return a
        def replaceBaseDir(a):
            a = a.replace('"$BASE_DIR', 'procEnv.item("BASE_DIR") + "')
            a = a.replace('$BASE_DIR"', '" + procEnv.item("BASE_DIR")')
            a = a.replace('$BASE_DIR', '" + procEnv.item("BASE_DIR") + "')
            return a
        def quoteEncapsulate(a): return '"'+a+'"'
    else:
        separator = ':'

    if env.GetOption('supersede') != '.':
	basedirAbs = env.Dir('.').abspath
	if env['PLATFORM'] == "posix":  # might be nfs path
            basedirAbs = resolve_nfs_path(basedirAbs)
	finalScript = finalScript.replace('${REPLACE-BASEDIR}', '"' + basedirAbs+ '"')
    else:
        if env['PLATFORM'] == 'win32':
            finalScript = finalScript.replace('${REPLACE-BASEDIR}', 'procEnv.item("INST_DIR")')
        else:
            finalScript = finalScript.replace('${REPLACE-BASEDIR}', '$INST_DIR')

    #Set up LD_LIBRARY_PATH and DYLD_LIBRARY_PATH
    ldLibraryPath = [ os.path.join('$INST_DIR', relpath(env.Dir(env.GetOption('supersede')).abspath, env['LIBDIR'].abspath))]
    ldLibraryPath.append(os.path.join('$BASE_DIR', 'lib', env['VARIANT']))
    ldLibraryPath.extend(env['WRAPPERLIBS'])
    if env['PLATFORM'] == 'win32':
        ldLibraryPath = map(quoteEncapsulate, ldLibraryPath)
        ldLibraryPath = map(replaceGlastExt, ldLibraryPath)
        ldLibraryPath = map(replaceInstDir, ldLibraryPath)
        ldLibraryPath = map(replaceBaseDir, ldLibraryPath)
        ldLibraryPath = map(replaceBackslash, ldLibraryPath)
    finalScript = finalScript.replace('${REPLACE-LIBDIRS}', separator.join(ldLibraryPath))

    #Setup PATH
    path = [os.path.join('$INST_DIR', relpath(env.Dir(env.GetOption('supersede')).abspath, env['BINDIR'].abspath))]
    path.append(os.path.join('$BASE_DIR', 'exe', env['VARIANT']))
    path.extend(env['WRAPPERBINS'])
    if env['PLATFORM'] == 'win32':
        path = map(quoteEncapsulate, path)
        path = map(replaceGlastExt, path)
        path = map(replaceInstDir, path)
        path = map(replaceBaseDir, path)
        path = map(replaceBackslash, path)
    finalScript = finalScript.replace('${REPLACE-PATHS}', separator.join(path))

    #Setup ROOTSYS
    rootSys = env['ROOTSYS']
    if env['PLATFORM'] == 'win32':
        rootSys = quoteEncapsulate(rootSys)
        rootSys = replaceGlastExt(rootSys)
        rootSys = replaceBackslash(rootSys)
    finalScript = finalScript.replace('${REPLACE-ROOTSYS}', rootSys)

    if env['PLATFORM'] != 'win32':   # set up PFILES
        # check for wrapper vs. wrapper; .sh versus .csh
        cmps = str(scriptFile.name).split('.')
        lastcmp = len(cmps) - 1
        if cmps[lastcmp] == "csh":
            if wrapper > 0:
                finalScript = finalScript.replace('${REPLACE-PFILES}',
                                                  cshellWrapperPfiles)
            else:
                finalScript = finalScript.replace('${REPLACE-PFILES}',
                                                  cshellSetupPfiles)
        else:        # sh
            if wrapper > 0:
                finalScript = finalScript.replace('${REPLACE-PFILES}',
                                                  shellWrapperPfiles)
            else:
                finalScript = finalScript.replace('${REPLACE-PFILES}',
                                                  shellSetupPfiles)

    #Setup PYTHONPATH
    pythonPath = [os.path.join('$INST_DIR','python')]
    pythonPath.append(os.path.join('$INST_DIR', relpath(env.Dir(env.GetOption('supersede')).abspath, env['LIBDIR'].abspath)))
    pythonPath.append(os.path.join('$BASE_DIR', 'python'))
    pythonPath.append(os.path.join('$BASE_DIR', 'lib', env['VARIANT']))
    pythonPath.append(os.path.join(env['ROOTSYS'], 'lib'))
    if env['PLATFORM'] == 'win32':
        pythonPath = map(quoteEncapsulate, pythonPath)
        pythonPath = map(replaceGlastExt, pythonPath)
        pythonPath = map(replaceInstDir, pythonPath)
        pythonPath = map(replaceBaseDir, pythonPath)
        pythonPath = map(replaceBackslash, pythonPath)
    finalScript = finalScript.replace('${REPLACE-PYTHONPATHS}', separator.join(pythonPath))
    

    if wrapper > 0:
        if env['PLATFORM'] != 'win32':
            finalScript = finalScript.replace('${REPLACE-WRAPPER-SCRIPT}', 'export INST_DIR=`dirname $0`\nexport INST_DIR=`cd $INST_DIR/../../; pwd`\n')
            finalScript = finalScript.replace('${REPLACE-WRAPPER-EXECUTE}', os.path.join('$INST_DIR', relpath(env.Dir(env.GetOption('supersede')).abspath, executable.abspath)+' "$@"\n'))
        else:
            finalScript = finalScript.replace('${REPLACE-WRAPPER-SCRIPT}', 'INST_DIR = WScript.ScriptFullName;\nINST_DIR = INST_DIR.substr(0, INST_DIR.lastIndexOf("\\\\"));\nINST_DIR = INST_DIR.substr(0, INST_DIR.lastIndexOf("\\\\"));\nINST_DIR = INST_DIR.substr(0, INST_DIR.lastIndexOf("\\\\"));\nprocEnv("INST_DIR") = INST_DIR;\n')
            wrapperScriptExecute = 'var arguments = "";\nfor(i=0; i<WScript.Arguments.length; i++){\n  arguments += WScript.Arguments(i) + " ";\n}\nshell.Run("cmd.exe /k " + procEnv("INST_DIR") + "\\' + relpath(env.Dir(env.GetOption('supersede')).abspath, executable.abspath)+ ' " + arguments)'
            wrapperScriptExecute = wrapperScriptExecute.replace('\\', '\\\\')
            finalScript = finalScript.replace('${REPLACE-WRAPPER-EXECUTE}', wrapperScriptExecute)
    else:
        if env['PLATFORM'] == 'win32':
            finalScript = finalScript.replace('${REPLACE-WRAPPER-EXECUTE}', 'shell.Run("cmd.exe")')
            finalScript = finalScript.replace('${REPLACE-WRAPPER-SCRIPT}', 'INST_DIR = WScript.ScriptFullName;\nINST_DIR = INST_DIR.substr(0, INST_DIR.lastIndexOf("\\\\"));\nINST_DIR = INST_DIR.substr(0, INST_DIR.lastIndexOf("\\\\"));\nINST_DIR = INST_DIR.substr(0, INST_DIR.lastIndexOf("\\\\"));\nprocEnv("INST_DIR") = INST_DIR;\n')
        else:
            finalScript = finalScript.replace('${REPLACE-WRAPPER-EXECUTE}', '')
            finalScript = finalScript.replace('${REPLACE-WRAPPER-SCRIPT}', '')
    scriptFile.write(finalScript)

def generate(env):
    def createWrapper(target = None, source = None, env = None):
        scriptContents = source.pop(0)
        for trgt in target:
            scriptFile = open(str(trgt), 'w')
            fillScript(scriptFile, env, 1, scriptContents, source.pop(0))
            scriptFile.close()
        return 0

    def createWrapperEmitter(target, source, env):
        target = []
        wrapperSuffix = ''
        if env['PLATFORM'] == 'win32':
            wrapperSuffix = '.js'
        for src in source:
            target.append(env['SCRIPTDIR'].File(os.path.splitext(os.path.basename(src.abspath))[0] + wrapperSuffix))
        if env["PLATFORM"] != "win32":
            source = [ env.Value(shellScript) ] + source
        else:
            source = [ env.Value(jsScript) ] + source
        return (target, source)

    def createWrapperGenerator(source, target, env, for_signature):
        actions = [env.Action(createWrapper, "Creating wrapper for '$TARGETS'")]
        for trgt in target:
            actions.append(SCons.Defaults.Chmod(trgt, 0755))
        return actions



    def createSetup(target = None, source = None, env = None):
        for trgt in target:
            scriptFile = open(str(trgt), 'w')
            fillScript(scriptFile, env, 0, source.pop(0), '')
            scriptFile.close()
        return 0

    def createSetupEmitter(target, source, env):
        if env['PLATFORM'] == 'win32':
            print "Generating windows setup scripts"
            target = [env['SCRIPTDIR'].File('_setup.js')]
            source = [env.Value(jsScript)]
        else:
            target = [env['SCRIPTDIR'].File('_setup.sh'), env['SCRIPTDIR'].File('_setup.csh')]
            source = [env.Value(shellScript), env.Value(cshellScript)]
        return (target, source)

    def createSetupGenerator(source, target, env, for_signature):
        actions = [env.Action(createSetup, "Creating setup scripts")]
        for trgt in target:
            actions.append(SCons.Defaults.Chmod(trgt, 0755))
        return actions


    env.Append(BUILDERS = {'GenerateWrapperScript' : env.Builder(generator = createWrapperGenerator,
                                                                 emitter = createWrapperEmitter)})

    env.Append(BUILDERS = {'GenerateSetupScript' : env.Builder(generator = createSetupGenerator,
                                                               emitter = createSetupEmitter)})

def exists(env):
    return 1;

