import os
import SCons.Action
import SCons.Builder

shellScript = '''#!/bin/sh
# Autogenerated by SCons; do not edit!

${REPLACE-WRAPPER-SCRIPT}

export BASE_DIR=${REPLACE-BASEDIR}

export LD_LIBRARY_PATH=${REPLACE-LIBDIRS}:$LD_LIBRARY_PATH
export DYLD_LIBRARY_PATH=${REPLACE-LIBDIRS}:$DYLD_LIBRARY_PATH
export PATH=${REPLACE-PATHS}:$PATH
if [ ! -w $HOME/pfiles/. ]; then
  mkdir $HOME/pfiles
  if [ $? -ne 0 ]; then
    echo "Cannot create local pfiles directory $HOME/pfiles" >&2
    exit 3
  fi
fi
if [ "x$PFILES" != x ]; then
  syspfiles=`echo $PFILES | sed "s%.*;%%"`
  locpfiles=`echo $PFILES | sed "s%;*$syspfiles$%%"`
fi
if [ "x$locpfiles" = x ]; then
  locpfiles="$HOME/pfiles"
else
  locpfiles=`echo ":$locpfiles:" | sed "s%:$HOME/pfiles:%:%g" | sed "s%::*$%%"`
  locpfiles="$HOME/pfiles$locpfiles"
fi
if [ "x$syspfiles" = x ]; then
  syspfiles="$INST_DIR/syspfiles:$BASE_DIR/syspfiles"
else
  syspfiles=`echo ":$syspfiles:" | sed "s%:$INST_DIR/syspfiles:%:%g" | sed "s%::*$%%"`
  syspfiles=`echo ":$syspfiles:" | sed "s%:$BASE_DIR/syspfiles:%:%g" | sed "s%::*$%%"`
  syspfiles="$INST_DIR/syspfiles:$BASE_DIR/syspfiles$syspfiles"
fi
export PFILES="$locpfiles;$syspfiles"
export PYTHONPATH=${REPLACE-PYTHONPATHS}:$PYTHONPATH
export ROOTSYS=${REPLACE-ROOTSYS}

${REPLACE-WRAPPER-EXECUTE}
'''

cshellScript = '''#!/bin/csh
# Autogenerated by SCons; do not edit!

${REPLACE-WRAPPER-SCRIPT}

setenv BASE_DIR ${REPLACE-BASEDIR}

if ($?LD_LIBRARY_PATH) then
  setenv LD_LIBRARY_PATH ${REPLACE-LIBDIRS}:$LD_LIBRARY_PATH
else
  setenv LD_LIBRARY_PATH ${REPLACE-LIBDIRS}
endif

if ($?DYLD_LIBRARY_PATH) then
  setenv DYLD_LIBRARY_PATH ${REPLACE-LIBDIRS}:$DYLD_LIBRARY_PATH
else
  setenv DYLD_LIBRARY_PATH ${REPLACE-LIBDIRS}
endif

if ($?PATH) then
  setenv PATH ${REPLACE-PATHS}:$PATH
else
  setenv PATH ${REPLACE-PATHS}
endif

if ( ! -d $HOME/pfiles ) then
  mkdir $HOME/pfiles
  if ($? != 0) then
    echo "Cannot create local pfiles directory $HOME/pfiles" >&2
    exit 3
  endif
endif

if ($?PFILES) then
  set syspfiles `echo $PFILES | sex "s%.*;%%"`
  set locpfiles `echo $PFILES | sed "s%;*$syspfiles$%%"`
endif

if ( !$?locpfiles) then
  set locpfiles "$HOME/pfiles"
else
  set locpfiles `echo ":$locpfiles:" | sed "s%:$HOME/pfiles:%:%g" | sed "s%::*$%%"`
  set locpfiles "$HOME/pfiles$locpfiles"
endif

if (!$?syspfiles) then
  set syspfiles "$INST_DIR/syspfiles:$BASE_DIR/syspfiles"
else
  set syspfiles `echo ":$syspfiles:" | sed "s%:$INST_DIR/syspfiles:%:%g" | sed "s%::*$%%"`
  set syspfiles `echo ":$syspfiles:" | sed "s%:$BASE_DIR/syspfiles:%:%g" | sed "s%::*$%%"`
  set syspfiles "$INST_DIR/syspfiles:$BASE_DIR/syspfiles$syspfiles"
endif
setenv PFILES "$locpfiles;$syspfiles"

if ($?PYTHONPATH) then
  setenv PYTHONPATH ${REPLACE-PYTHONPATHS}:${PYTHONPATH}
else
  etenv PYTHONPATH ${REPLACE-PYTHONPATHS}
endif

setenv ROOTSYS ${REPLACE-ROOTSYS}

${REPLACE-WRAPPER-EXECUTE}
'''

jsScript = '''//Autogenerated by SCons; do not edit!
var shell = WScript.CreateObject("WScript.Shell");
var procEnv = shell.Environment("Process");
var sysEnv = shell.Environment("System");

${REPLACE-WRAPPER-SCRIPT}

procEnv("BASE_DIR") = ${REPLACE-BASEDIR}

procEnv("PATH") = ${REPLACE-PATHS} + ";" + procEnv.item("PATH");
procEnv("PATH") = procEnv.item("PATH") + ";" + ${REPLACE-LIBDIRS};

var fileSystem = WScript.CreateObject("Scripting.FileSystemObject");
if(!fileSystem.FolderExists(procEnv.item("HOMEDRIVE") + procEnv.item("HOMEPATH") + "\\pfiles")){
  fileSystem.CreateFolder(procEnv.item("HOMEDRIVE") + procEnv.item("HOMEPATH") + "\\pfiles");
}
locpfiles = ""
syspfiles = ""
if(procEnv.item("PFILES") != ""){
  locpfiles = procEnv.item("PFILES").substr(0, procEnv.item("PFILES").lastIndexOf("|"));
  if(locpfiles == ""){
    locpfiles = procEnv.item("PFILES");
  }
  syspfiles = procEnv.item("PFILES").replace(locpfiles, "");
  syspfiles = syspfiles.replace("|", "");
}
if(locpfiles == ""){
  locpfiles = procEnv.item("HOMEDRIVE") + procEnv.item("HOMEPATH") + "\\pfiles";
}
else{
  locpfiles = (";" + locpfiles + ";").replace(";" + procEnv.item("HOMEDRIVE") + procEnv.item("HOMEPATH"), ";");
  locpfiles = locpfiles.replace(";;", "");
  locpfiles = procEnv.item("HOMEDRIVE") + procEnv.item("HOMEPATH") + "\\\\pfiles" + locpfiles;
}
if(syspfiles = ""){
  syspfiles = procEnv.item("INST_DIR") + "\\\\syspfiles;" + procEnv.item("BASE_DIR") + "\\\\syspfiles";
}
else{
  syspfiles = (";" + syspfiles + ";").replace(";" + procEnv("INST_DIR") + "\\\\syspfiles", ";");
  syspfiles = (";" + syspfiles + ";").replace(";" + procEnv("BASE_DIR") + "\\\\syspfiles", ";");
  syspfiles = syspfiles.replace(";;", "");
  syspfiles = procEnv.item("INST_DIR") + "\\\\syspfiles;" + procEnv.item("BASE_DIR") + "\\\\syspfiles";
}
procEnv("PFILES") = locpfiles + ";" + syspfiles;
procEnv("ROOTSYS") = ${REPLACE-ROOTSYS}
procEnv("PYTHONPATH") = ${REPLACE-PYTHONPATHS} + ";" + procEnv.item("PYTHONPATH")
WScript.Echo(locpfiles);

${REPLACE-WRAPPER-EXECUTE}
'''

# Helper functions to determine relative paths
# Obtained from http://code.activestate.com/recipes/208993/
def commonpath(l1, l2, common=[]):
    if len(l1) < 1: return (common, l1, l2)
    if len(l2) < 1: return (common, l1, l2)
    if l1[0] != l2[0]: return (common, l1, l2)
    return commonpath(l1[1:], l2[1:], common+[l1[0]])

def relpath(p1, p2):


    (common,l1,l2) = commonpath(p1.split(os.path.sep), p2.split(os.path.sep))
    p = []
    if len(l1) > 0:
        p = [ '../' * len(l1) ]
    p = p + l2
    return os.path.join( *p )

## Fill contents of wrapper scripts and setup script for an SCons installation
def fillScript(scriptFile, env, wrapper, script, executable):
    finalScript = script.get_contents()

    if env.GetOption('supersede') != '.':
        finalScript = finalScript.replace('${REPLACE-BASEDIR}', '"' + env.Dir('.').abspath + '"')
    else:
        if env['PLATFORM'] == 'win32':
            finalScript = finalScript.replace('${REPLACE-BASEDIR}', 'procEnv.item("INST_DIR")')
        else:
            finalScript = finalScript.replace('${REPLACE-BASEDIR}', '$INST_DIR')

    #Set up LD_LIBRARY_PATH and DYLD_LIBRARY_PATH
    if env['PLATFORM'] == 'win32':
        ldLibraryPath = 'procEnv("INST_DIR") + "\\' + relpath(env.Dir(env.GetOption('supersede')).abspath, env['LIBDIR'].abspath)
        ldLibraryPath += os.pathsep + '"' + ' + procEnv("BASE_DIR") + "\\' + os.path.join('lib', env['VARIANT'])
        for lib in env['WRAPPERLIBS']:
            ldLibraryPath += os.pathsep + lib
        ldLibraryPath = ldLibraryPath.replace('$GLAST_EXT', '" + procEnv("GLAST_EXT") + "')
        ldLibraryPath = ldLibraryPath.replace('\\', '\\\\')
        ldLibraryPath += '"'
    else:
        ldLibraryPath = os.path.join('$INST_DIR', relpath(env.Dir(env.GetOption('supersede')).abspath, env['LIBDIR'].abspath))
        ldLibraryPath += os.pathsep + os.path.join('$BASE_DIR', 'lib', env['VARIANT'])
        for lib in env['WRAPPERLIBS']:
            ldLibraryPath += os.pathsep + lib
    finalScript = finalScript.replace('${REPLACE-LIBDIRS}', ldLibraryPath)

    #Setup PATH
    if env['PLATFORM'] == 'win32':
        path = 'procEnv.item("INST_DIR") + "\\' + relpath(env.Dir(env.GetOption('supersede')).abspath, env['SCRIPTDIR'].abspath)
        path += os.pathsep + '" + procEnv.item("BASE_DIR") + "\\' + os.path.join('bin', env['VARIANT'])
        for bin in env['WRAPPERBINS']:
          path += os.pathsep + bin
        path = path.replace('$GLAST_EXT', '" + procEnv("GLAST_EXT") + "')
        path = path.replace('\\', '\\\\')
        path += '"'
    else:
        path = os.path.join('$INST_DIR', relpath(env.Dir(env.GetOption('supersede')).abspath, env['SCRIPTDIR'].abspath))
        path += os.pathsep + os.path.join('$BASE_DIR', 'bin', env['VARIANT'])
        for bin in env['WRAPPERBINS']:
            path += os.pathsep + bin
    finalScript = finalScript.replace('${REPLACE-PATHS}', path)

    #Setup PYTHONPATH
    if env['PLATFORM'] == 'win32':
        pythonPath = 'procEnv.item("INST_DIR") + "\\python" + procEnv.item("INST_DIR") + "\\' + relpath(env.Dir(env.GetOption('supersede')).abspath, env['LIBDIR'].abspath)
        pythonPath += os.pathsep + '" + procEnv.item("BASE_DIR") + "\\' + os.path.join('lib', env['VARIANT'])
        pythonPath = pythonPath.replace('\\', '\\\\')
        pythonPath += '"'
    else:
        pythonPath = os.path.join('$INST_DIR','python') + os.pathsep + os.path.join('$INST_DIR', relpath(env.Dir(env.GetOption('supersede')).abspath, env['LIBDIR'].abspath))
        pythonPath += os.pathsep + os.path.join('$BASE_DIR', 'pyhon') + os.pathsep + os.path.join('$BASE_DIR', 'lib', env['VARIANT'])
    finalScript = finalScript.replace('${REPLACE-PYTHONPATHS}', pythonPath)
                                      
    #Setup ROOTSYS
    rootSys = env['ROOTSYS']
    if env['PLATFORM'] == 'win32':
        rootSys = rootSys.replace('$GLAST_EXT', 'procEnv.item("GLAST_EXT") + "')
        rootSys = rootSys.replace('\\', '\\\\')
        rootSys += '"'
    finalScript = finalScript.replace('${REPLACE-ROOTSYS}', rootSys)

    if wrapper > 0:
        if env['PLATFORM'] != 'win32':
            finalScript = finalScript.replace('${REPLACE-WRAPPER-SCRIPT}', 'export INST_DIR=`dirname $0`\nexport INST_DIR=`cd $INST_DIR/../../; pwd`\n')
            finalScript = finalScript.replace('${REPLACE-WRAPPER-EXECUTE}', os.path.join('$INST_DIR', relpath(env.Dir(env.GetOption('supersede')).abspath, executable.abspath)+' "$@"\n'))
        else:
            finalScript = finalScript.replace('${REPLACE-WRAPPER-SCRIPT}', 'INST_DIR = WScript.ScriptFullName;\nINST_DIR = INST_DIR.substr(0, INST_DIR.lastIndexOf("\\\\"));\nINST_DIR = INST_DIR.substr(0, INST_DIR.lastIndexOf("\\\\"));\nINST_DIR = INST_DIR.substr(0, INST_DIR.lastIndexOf("\\\\"));\nprocEnv("INST_DIR") = INST_DIR;\n')
            wrapperScriptExecute = 'var arguments = "";\nfor(i=0; i<WScript.Arguments.length; i++){\n  arguments += WScript.Arguments(i) + " ";\n}\nshell.Run("cmd.exe /k " + procEnv("INST_DIR") + "\\' + relpath(env.Dir(env.GetOption('supersede')).abspath, executable.abspath)+ ' " + arguments)'
            wrapperScriptExecute = wrapperScriptExecute.replace('\\', '\\\\')
            finalScript = finalScript.replace('${REPLACE-WRAPPER-EXECUTE}', wrapperScriptExecute)
    else:
        finalScript = finalScript.replace('${REPLACE-WRAPPER-EXECUTE}', '')
        finalScript = finalScript.replace('${REPLACE-WRAPPER-SCRIPT}', '')
    scriptFile.write(finalScript)

#def fillWindowsScript(scriptFile, env, wrapper):
#    scriptFile.write("' Autogenerated by SCons; do not edit!\n")
#    scriptFile.write('set shell = CreateObject("WScript.Shell")\n')
#    scriptFile.write('set env = shell.Environment("Process")\n')

#    if wrapper > 0:
#        scriptFile.write('INST_DIR = WScript.ScriptFullName\n')
#        scriptFile.write('INST_DIR = Left(INST_DIR,InStrRev(INST_DIR,"\\")-1)\n')
#        scriptFile.write('INST_DIR = Left(INST_DIR,InStrRev(INST_DIR,"\\")-1)\n')
#        scriptFile.write('INST_DIR = Left(INST_DIR,InStrRev(INST_DIR,"\\")-1)\n')
#        scriptFile.write('env("INST_DIR")=INST_DIR\n')
#    else:
#        scriptFile.write('INST_DIR = env.item("INST_DIR")\n')
        
#    scriptFile.write('GLAST_EXT = env.item("GLAST_EXT")\n')
#    scriptFile.write('If GLAST_EXT = "" Then\n')
#    scriptFile.write('  WScript.Echo("What is the location of the External libraries?")\n')
#    scriptFile.write('  WScript.Echo("If you set %GLAST_EXT% to this location this script will no longer ask")\n')
#    scriptFile.write('  GLAST_EXT = WScript.StdIn.ReadLine()\n')
#    scriptFile.write('  env("GLAST_EXT")=GLAST_EXT\n')
#    scriptFile.write('End If\n')
#    scriptFile.write('env("PATH") = env.Item("PATH") & ";" & INST_DIR & "\\' + str(env['LIBDIR'])+'"\n')
#    scriptFile.write('If GLAST_EXT = "" or INST_DIR = "" Then\n')
#    scriptFile.write('  WScript.Echo("GLAST_EXT not set or unable to determine installation directory")\n')
#    scriptFile.write('  WScript.Quit(1)\n')
#    scriptFile.write('End If\n')

#    scriptFile.write('set filesystemObject = CreateObject("Scripting.FileSystemObject")\n')

#    if wrapper == 0:  # when run _setup.vbs will write a file _setup.bat
#        scriptFile.write('set batFile = filesystemObject.OpentextFile("_setup.bat", 2, True)\n')
        
    # Compute PATH
#    scriptFile.write('env("PATH") = env.Item("PATH") ')
#    for lib in env['WRAPPERLIBS']:
#        lib = lib.replace("$GLAST_EXT", "GLAST_EXT & \"") + "\""
#        scriptFile.write('& ";" & '+lib)
#    scriptFile.write('\n')
#    if wrapper == 0:
#        scriptFile.write('pathstring = env.item("PATH")\n')
#        scriptFile.write('setpathstring = "set PATH=" & pathstring\n')
#        scriptFile.write('batFile.WriteLine(setpathstring)\n')

    # Compute PFILES, creating dirs if needed
#    scriptFile.write('If filesystemObject.FolderExists(env.item("HOMEDRIVE") & env.item("HOMEPATH") & "\\pfiles") Then\n')
#    scriptFile.write('  shell.Exec("cmd.exe /C md """ & env.item("HOMEDRIVE") & env.item("HOMEPATH") & "\\pfiles")\n')
#    scriptFile.write('End If\n')
#    scriptFile.write('If env.item("PFILES") <> "" Then\n')
#    scriptFile.write('  locpfiles = Left(env.item("PFILES"), InStr(env.item("PFILES"), "|"))\n')
#    scriptFile.write('  If locpfiles = "" Then\n')
#    scriptFile.write('    locpfiles = env.item("PFILES")\n')
#    scriptFile.write('  End If\n')
#    scriptFile.write('  sypfiles = Replace(env.item("PFILES"), locpfiles, "")\n')
#    scriptFile.write('  syspfiles = Replace(syspfiles, "|", "")\n')
#    scriptFile.write('End If\n')
#    scriptFile.write('If locpfiles = "" Then\n')
#    scriptFile.write('  locpfiles = env.item("HOMEDRIVE") & env.item("HOMEPATH") & "\\pfiles"\n')
#    scriptFile.write('Else\n')
#    scriptFile.write('  locpfiles = Replace(";" & locpfiles & ";", ";" & env.item("HOMEDRIVE") & env.item("HOMEPATH"), ";")\n')
#    scriptFile.write('  locpfiles = Replace(locpfiles, ";;", "")\n')
#    scriptFile.write('  locpfiles = env.item("HOMEDRIVE") & env.item("HOMEPATH") & "\\pfiles" & locpfiles\n')
#    scriptFile.write('End If\n')
#    scriptFile.write('if syspfiles = "" Then\n')
#    scriptFile.write('  syspfiles = INST_DIR & "\\syspfiles"\n')
#    scriptFile.write('Else\n')
#    scriptFile.write('  syspfiles = Replace(";" & syspfiles & ";", ";" & INST_DIR & "\\syspfiles", ";")\n')
#    scriptFile.write('  syspfiles = Replace(syspfiles, ";;", "")\n')
#    scriptFile.write('  syspfiles = INST_DIR & "\\syspfiles"\n')
#    scriptFile.write('End If\n')
#    scriptFile.write('env("PFILES") = locpfiles & ";" & syspfiles\n')
#    scriptFile.write('For i=0 to WScript.Arguments.Count-1\n')
#    scriptFile.write('  arguments = arguments & WScript.Arguments.Item(i) & " "\n')
#    scriptFile.write('Next\n')

    # Handle ROOTSYS
#    if env.has_key('ROOTSYS'):
#        rootsys = env['ROOTSYS'].replace("$GLAST_EXT", "")
#        scriptFile.write('env("ROOTSYS") = env("GLAST_EXT") & "'+rootsys+'"\n')
#        if wrapper == 0:
#            scriptFile.write('rootstring = env.item("ROOTSYS")\n')
#            scriptFile.write('setrootstring = "set ROOTSYS=" & rootstring\n')
#            scriptFile.write('batFile.WriteLine(setrootstring)\n')

#    scriptFile.write('env("PYTHONPATH") = INST_DIR & "\\python" & env("PYTHONPATH")\n')
#    if wrapper == 0:
#        scriptFile.write('pfilesstring = env.item("PFILES")\n')
#        scriptFile.write('setpfilesstring = "set PFILES=" & pfilesstring\n')
#        scriptFile.write('batFile.WriteLine(setpfilesstring)\n')

#        scriptFile.write('pythonstring = env.item("PYTHONPATH")\n')
#        scriptFile.write('setpythonstring = "set PYTHONPATH=" & pythonstring\n')
#        scriptFile.write('batFile.WriteLine(setpythonstring)\n')
#        scriptFile.write('batFile.Close\n')
#    return



#def generatePosixScript(target, source, env):
#    for executable in source:
#        scriptFile = open(str(env['SCRIPTDIR'].File(os.path.basename(str(executable)))), 'w')
#        fillShellScript(scriptFile, env, 1, shellScript, executable)
#        scriptFile.close()
#    return 0

#def generateWindowsScript(target, source, env):
#    for executable in source:
#        scriptFile = open(str(env['SCRIPTDIR'].File(os.path.splitext(os.path.basename(str(executable)))[0]+".vbs")), 'w')
#        fillWindowsScript(scriptFile, env, 1)
#        scriptFile.write('shell.Run "cmd.exe /k """ & INST_DIR & "\\'+str(executable)+'"" " & arguments, 1, true')
#        scriptFile.close()


#def generateScriptEmitter(target, source, env):
#    target = []
#    for src in source:
#        target.append(env['SCRIPTDIR'].File(os.path.basename(src.abspath)))
#    return (target, source)

# Don't use sources explicitly in generateSetup, but want them there so that
# _setup will be rebuilt when they change.  
# All information going into the output file comes from environment
#def generateSetup(target, source, env):
#    # General builder machinery should have added on appropriate suffix if necessary
#    # open file for writing
#    setupFile = open(str(target[0]), 'w')
#    if env['PLATFORM'] == 'win32':
#        fillWindowsScript(setupFile, env, 0)
#    else:
#        fillShellScript(setupFile, env, 0, shellScript, '')
#    setupFile.close()

def generate(env):
    def createWrapper(target = None, source = None, env = None):
        scriptContents = source.pop(0)
        for trgt in target:
            scriptFile = open(str(trgt), 'w')
            fillScript(scriptFile, env, 1, scriptContents, source.pop(0))
            scriptFile.close()
        return 0

    def createWrapperEmitter(target, source, env):
        target = []
        wrapperSuffix = ''
        if env['PLATFORM'] == 'win32':
            wrapperSuffix = '.js'
        for src in source:
            target.append(env['SCRIPTDIR'].File(os.path.splitext(os.path.basename(src.abspath))[0] + wrapperSuffix))
        if env["PLATFORM"] != "win32":
            source = [ env.Value(shellScript) ] + source
        else:
            source = [ env.Value(jsScript) ] + source
        return (target, source)

    def createWrapperGenerator(source, target, env, for_signature):
        actions = [env.Action(createWrapper, "Creating wrapper for '$TARGETS'")]
        for trgt in target:
            actions.append(SCons.Defaults.Chmod(trgt, 0755))
        return actions



    def createSetup(target = None, source = None, env = None):
        for trgt in target:
            scriptFile = open(str(trgt), 'w')
            fillScript(scriptFile, env, 0, source.pop(0), '')
            scriptFile.close()
        return 0

    def createSetupEmitter(target, source, env):
        target = [env['SCRIPTDIR'].File('_setup.sh'), env['SCRIPTDIR'].File('_setup.csh')]
        source = [env.Value(shellScript), env.Value(cshellScript)]
        return (target, source)

    def createSetupGenerator(source, target, env, for_signature):
        actions = [env.Action(createSetup, "Creating setup scripts")]
        for trgt in target:
            actions.append(SCons.Defaults.Chmod(trgt, 0755))
        return actions


    env.Append(BUILDERS = {'GenerateWrapperScript' : env.Builder(generator = createWrapperGenerator,
                                                                 emitter = createWrapperEmitter)})

    env.Append(BUILDERS = {'GenerateSetupScript' : env.Builder(generator = createSetupGenerator,
                                                               emitter = createSetupEmitter)})

#    setupSuffix = '.sh'
#    if env['PLATFORM'] != 'win32':
#        GenerateScriptAction = SCons.Action.Action(generatePosixScript,
#                                                   "Creating wrapper script for '$TARGET'")
#        GenerateScriptBuilder = SCons.Builder.Builder(action = [GenerateScriptAction,
#                                                                SCons.Defaults.Chmod('$TARGET', 0755)],
#                                                      emitter = generateScriptEmitter,
#                                                      single_source = 1)
#    else:
#        setupSuffix = '.vbs'
#        GenerateScriptAction= SCons.Action.Action(generateWindowsScript,
#                                                  "Creating wrapper script for '$TARGET'")
#	GenerateScriptBuilder=SCons.Builder.Builder(action = [GenerateScriptAction],
#                                                    emitter = generateScriptEmitter,
#                                                    single_source = 1)

#    env['BUILDERS']['GenerateWrapperScript'] = GenerateScriptBuilder

#    GenerateSetupBuilder = SCons.Builder.Builder(action = generateSetup,
#                                                 suffix=setupSuffix)
#    env['BUILDERS']['GenerateSetupScript'] = GenerateSetupBuilder

def exists(env):
    return 1;

