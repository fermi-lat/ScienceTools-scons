# -*- python -*-

allExternalLibraries = {
    'CLHEP'    : { '1.9.2.2' : { 'default' : { 'include-path' : os.path.join('$GLAST_EXT', '$NAME', '$VERSION', '$COMPILER', 'include'),
                                               'lib-path'     : os.path.join('$GLAST_EXT', '$NAME', '$VERSION', '$COMPILER', 'lib'),
                                               'ld-path'      : '$LIB-PATH',
                                               'includes'     : [ 'CLHEP/config/CLHEP.h' ],
                                               'libraries'    : { 'clhepLibs' : [ 'CLHEP'] }
                                             }
                               }
                 },

    'fftw'     : { '3.1.2' : { 'default' : { 'include-path' : os.path.join('$GLAST_EXT', '$NAME', '$VERSION', '$COMPILER', 'include'),
                                             'lib-path'     : os.path.join('$GLAST_EXT', '$NAME', '$VERSION', '$COMPILER', 'lib'),
                                             'ld-path'      : '$LIB-PATH',
                                             'includes'     : [ 'fftw/fftw3.h' ],
                                             'libraries'    : { 'fftwLibs' : ['fftw3'] }
                                           },
                               'win32'   : { 'libraries'    : { 'fftwLibs' : ['libfftw3'] } }
                             }
                 },

    'cfitsio'  : { 'v3060' : { 'default' : { 'include-path' : os.path.join('$GLAST_EXT', '$NAME', '$VERSION', '$COMPILER', 'include'),
                                             'lib-path'     : os.path.join('$GLAST_EXT', '$NAME', '$VERSION', '$COMPILER', 'lib'),
                                             'ld-path'      : '$LIB-PATH',
                                             'includes'     : [ 'fitsio.h' ],
                                             'libraries'    : { 'cfitsioLibs' : [ 'cfitsio', 'm' ] }
                                           },
                               'win32'   : { 'libraries'    : { 'cfitsioLibs' : [ 'cfitsio' ] } }
                             }
                 }
    
    'ape'      : { '2.3-gl1' : { 'default' : { 'include-path' : os.path.join('$GLAST_EXT', '$NAME', '$VERSION', '$COMPILER', 'include'),
                                               'lib-path'     : os.path.join('$GLAST_EXT', '$NAME', '$VERSION', '$COMPILER', 'lib'),
                                               'ld-path'      : '$LIB-PATH',
                                               'includes'     : [ 'ape/ape_list.h' ],
                                               'libraries'    : { 'apeLibs' : [ 'ape', 'readline', 'termcap' ] }
                                             },
                                 'win32'   : { 'libraries'    : { 'apeLibs' : [ 'apelib' ] } }
                               }
                 },
    
    'ROOT'     : { 'v5.18.00b' : { 'default' : { 'include-path' : os.path.join('$GLAST_EXT', '$NAME', '$VERSION', '$COMPILER', 'include'),
                                                 'lib-path'     : os.path.join('$GLAST_EXT', '$NAME', '$VERSION', '$COMPILER', 'lib'),
                                                 'ld-path'      : '$LIB-PATH',
                                                 'includes'     : ['RVersion.h' ],
                                                 'libraries'    : { 'rootLibs'    : ['Tree', 'Net', 'Gpad', 'Graf', 'RIO', 'Hist', 'Physics', 'Matrix', 'Core', 'Cint', 'pthread', 'm', 'dl' ],
                                                                    'rootGuiLibs' : [ 'Rint', 'Postscript', 'TreePlayer', 'Tree', 'Net', 'Graf3d', 'Gui', 'HistPainter', 'Gpad' ],
                                                                    'minuitLibs'  : [ 'Minuit2', 'Minuit', 'Graf', 'RIO', 'Hist', 'Matrix', 'Core', 'Cint' ]
                                                                  }
                                               },
                                   'win32' : { 'libraries'      : { 'rootLibs'    : [ 'libCore', 'libCint', 'libRIO', 'libNet', 'libTree', 'libHist', 'libGraf', 'libGpad', 'libMatrix', 'libPhysics' ],
                                                                    'rootGuiLibs' : [ 'libHist', 'libGraf', 'libGraf3d', 'libGpad', 'libRint', 'libPostscript', 'libTreePlayer', 'libGui', 'libHistPainter' ],
                                                                    'minuitLibs'  : [ 'libMinuit2' ]
                                                                  }
                                             }
                                 },
                   
                   'v5.18.00c-gl1' : { 'default' : { 'include-path' : os.path.join('$GLAST_EXT', '$NAME', '$VERSION', '$COMPILER', 'include'),
                                                     'lib-path'     : os.path.join('$GLAST_EXT', '$NAME', '$VERSION', '$COMPILER', 'lib'),
                                                     'ld-path'      : '$LIB-PATH',
                                                     'includes'     : [ 'RVersion.h' ],
                                                     'libraries'    : { 'rootLibs'    : [ 'Tree', 'Net', 'Gpad', 'Graf', 'RIO', 'Hist', 'Physics', 'Matrix', 'Core', 'Cint', 'pthread', 'm', 'dl' ],
                                                                        'rootGuiLibs' : [ 'Rint', 'Postscript', 'TreePlayer', 'Tree', 'Net', 'Graf3d', 'Gui', 'HistPainter', 'Gpad' ],
                                                                        'minuitLibs'  : [ 'Minuit2', 'Minuit', 'Graf', 'RIO', 'Hist', 'Matrix', 'Core', 'Cint' ]
                                                                      }
                                                   },
                                       'win32'   : { 'libraries'    : { 'rootLibs'    : [ 'libCore', 'libCint', 'libRIO', 'libNet', 'libTree', 'libHist', 'libGraf', 'libGpad', 'libMatrix', 'libPhysics' ],
                                                                        'rootGuiLibs' : [ 'libHist', 'libGraf', 'libGraf3d', 'libGpad', 'libRint', 'libPostscript', 'libTreePlayer', 'libGui', 'libHistPainter' ],
                                                                        'minuitLibs'  : [ 'libMinuit2' ]
                                                                      }
                                                   }
                                     }
                 },

    'swig'     : { '1.3.31' : { 'default' : { 'bin-path'   : os.path.join('$GLAST_EXT','$NAME','$VERSION','$COMPILER', 'bin'),
                                              'share-path' : os.path.join('$GLAST_EXT', '$NAME', '$VERSION', '$COMPILER', 'share', 'swig', '$VERSION'),
                                              'ld-path'    : '$LIB-PATH',
                                              'binaries'   : [ 'swig' ]
                                            },
                                'win32'   : { 'share-path' : os.path.join('$GLAST_EXT', '$NAME', '$VERSION', '$COMPILER', 'share', 'swig') }
                              }
                 },
    
    'xerces'   : { '2.7.0' : { 'default' : { 'include-path' : os.path.join('$GLAST_EXT', '$NAME', '$VERSION', '$COMPILER', 'include'),
                                             'lib-path'     : os.path.join('$GLAST_EXT', '$NAME', '$VERSION', '$COMPILER', 'lib'),
                                             'bin-path'     : os.path.join('$GLAST_EXT', '$NAME','$VERSION','$COMPILER', 'bin'),
                                             'ld-path'      : '$LIB-PATH',
                                             'includes'     : [ 'xercesc/util/XercesVersion.hpp' ],
                                             'libraries'    : { 'xercesLibs'  : [ 'xerces-c', 'pthread' ] }
                                           },
                               'win32'   : { 'ld-path'      : '$BIN-PATH' }
                             }
                 },
                   
    'cppunit'  : { '1.10.2' : { 'default' : { 'include-path' : os.path.join('$GLAST_EXT', '$NAME', '$VERSION', '$COMPILER', 'include'),
                                              'lib-path'     : os.path.join('$GLAST_EXT', '$NAME', '$VERSION', '$COMPILER', 'lib'),
                                              'ld-path'      : '$LIB-PATH',
                                              'includes'     : [ 'cppunit/ui/text/TextTestRunner.h' ],
                                              'libraries'    : { 'cppunitLibs' : [ 'cppunit', 'dl' ] }
                                            }
                                'win32'   : { 'libraries'    : { 'cppunitLibs' : [ 'CPPUNIT' ] } }
                              }
                 },
                   
    'python'   : { '2.5.1' : { 'default' : { 'include-path' : os.path.join('$GLAST_EXT', '$NAME', '$VERSION', '$COMPILER', 'include', 'python2.5'),
                                             'lib-path'     : os.path.join('$GLAST_EXT', '$NAME', '$VERSION', '$COMPILER', 'lib', 'python2.5', 'config'),
                                             'ld-path'      : '$LIB-PATH',
                                             'includes'     : [ 'Python.h' ]
                                           },
                               'win32'   : { 'include-path' : os.path.join('$GLAST_EXT', '$NAME', '$VERSION', '$COMPILER', 'include'),
                                             'lib-path'     : os.path.join('$GLAST_EXT','$NAME','$VERSION','$COMPILER', 'libs'),
                                             'libraries'    : { 'pythonLibs' : [ 'python25' ] }
                                           },
                               'posix'   : { 'libraries'    : { 'pythonLibs' : [ 'pthread', 'dl', 'util', 'm', 'python2.5' ] } }
                               'darwin'  : { 'libraries'    : { 'pythonLibs' : [ 'pthread', 'dl', 'm', 'python2.5' ] } }
                             }
                 }
                   
    'f2c'      : { '3.4' : { 'default' : { 'lib-path'  : os.path.join('$GLAST_EXT', '$NAME', '$VERSION', '$COMPILER', 'lib'),
                                           'ld-path'   : '$LIB-PATH',
                                           'libraries' : { 'f2cLibs' : [ 'g2c' ] }
                                         }
                           }

                   '3.4.6' : { 'default' : { 'libraries'    : { 'f2cLibs' : [ 'g2c' ] } },
                               'win32'   : { 'libraries'    : { 'f2cLibs' : [ 'libf77mt.lib', 'libi77mt.lib', 'oldnames.lib' ] } }
                             }
                 },

    'extFiles' : { 'v0r7' : { 'cppDefines' : [ 'extFiles=\\"$VERSION\\"' ] }
                 }
  }

def compilerName(env):
    if env['PLATFORM'] == "win32":
        return 'vc' + ''.join(env['MSVS']['VERSION'].split('.')[0:2])
    else:
        return 'gcc' + ''.join(env['CXXVERSION'].split('.')[0:2])
    
def useExternal(env, name, version):
    if not name in allExternalLibraries:
        return 0
    if not version in allExternalLibraries[name]:
        return 0
    ourExternal = allExternalLibraries[name][version]['default']
    if env['PLATFORM'] in allExternalLibraries[name][version]:
        for section in allExternalLibraries[name][version][env['PLATFORM']]:
            ourExternal[section] = allExternalLibraries[name][version][env['PLATFORM']][section]

    if compilerName(env) in allExternalLibraries[name][version]:
        for section in allExternalLibraries[name][version][compilerName(env)]:
            ourExternal[section] = allExternalLibraries[name][version][compilerName(env)]
    return setupEnvironment(env, ourExternal, name, version)

def setupEnvironment(env, external, name, version):
    env.AddOption('--with-'+name, dest = name, nargs=1, type='string', action='store', metavar='DIR', help='location of '+name+' '+version+' headers/libraries')
    if 'include-path' in external:
        env.AddOption('--with-'+name+'-includes', dest = name+'-includes', nargs=1, type='string', action='store', metavar='DIR', help='location of '+name+' '+version+' headers')
    if 'lib-path' in external:
        env.AddOption('--with-'+name+'-libraries', dest = name+'-libraries', nargs=1, type='string', action='store', metavar='DIR', help='location of '+name+' '+version+' libraries')
    if 'bin-path' in external:
        env.AddOption('--with-'+name+'-binaries', dest = name+'-binaries', nargs=1, type='string', action='store', metavar='DIR', help='location of '+name+' '+version+' binaries')

    if env.GetOption(name):
        if 'include-path' in external:
            external['include-path'] = os.path.join(env.GetOption(name), 'include')
        if 'lib-path' in external:
            external['lib-path'] = os.path.join(env.GetOption(name), 'lib')
        if 'bin-path' in external:
            external['bin-path'] = os.path.join(env.GetOption(name), 'bin')
    else:
        if env.GetOption(name+'-includes'):
            external['include-path'] = env.GetOption(name+'-includes')
        if env.GetOption(name+'-libraries'):
            external['lib-path'] = env.GetOption(name+'-libraries')
        if env.GetOption(name+'-binaries'):
            external['bin-path'] = env.GetOption(name+'-binaries')
            
    for section in external:
        external[section] = external[section].replace('$COMPILER', compilerName(env))
        external[section] = external[section].replace('$VERSION', version)
        external[section] = external[section].replace('$NAME', name)
        
