# -*- python -*-                                                                                                                                                                                         
import os

Import('usedExternals')
###Import('allExternalLibraries')
Import('allExternals')
Import('baseEnv')

AddOption('--with-GLAST-EXT', dest = 'GLAST-EXT', nargs=1, type='string', action='store', metavar='DIR',
          help='location of GLAST_EXT type directory layout for external libraries')

def getExternal(name, version, compiler):
    configuredExternal = allExternals[name][version]['default']
    #Check for default overrides for OS
    if baseEnv['PLATFORM'] in allExternals[name][version]:
        for section in allExternals[name][version][baseEnv['PLATFORM']]:
            configuredExternal[section] = allExternals[name][version][baseEnv['PLATFORM']][section]

    #Check for default overrides for compiler    
    if compiler in allExternals[name][version]:
        for section in allExternals[name][version][compiler]:
            configuredExternal[section] = allExternals[name][version][compiler][section]

    return configuredExternal

def setupOptions(name, configuredExternal):
    #Setup scons options and check for them
    AddOption('--with-'+name, dest = name, nargs=1, type='string', action='store', metavar='DIR',
              help='location of '+name+' '+configuredExternal['version']+' headers/libraries')

    if 'include-path' in configuredExternal:
        AddOption('--with-'+name+'-includes', dest = name+'-includes', nargs=1, type='string', action='store',
                  metavar='DIR', help='location of '+name+' '+configuredExternal['version']+' headers')
    if 'lib-path' in configuredExternal:
        AddOption('--with-'+name+'-libraries', dest = name+'-libraries', nargs=1, type='string', action='store',
                  metavar='DIR', help='location of '+name+' '+configuredExternal['version']+' libraries')
    if 'bin-path' in configuredExternal:
        AddOption('--with-'+name+'-binaries', dest = name+'-binaries', nargs=1, type='string', action='store',
                  metavar='DIR', help='location of '+name+' '+configuredExternal['version']+' binaries')

    if baseEnv.GetOption(external['name']):
        if 'include-path' in configuredExternal:
            configuredExternal['include-path'] = os.path.join(env.GetOption(external['name']), 'include')
        if 'lib-path' in configuredExternal:
            configuredExternal['lib-path'] = os.path.join(env.GetOption(external['name']), 'lib')
        if 'bin-path' in configuredExternal:
            configuredExternal['bin-path'] = os.path.join(env.GetOption(external['name']), 'bin')
    else:
        if 'include-path' in configuredExternal and baseEnv.GetOption(external['name']+'-includes'):
            configuredExternal['include-path'] = baseEnv.GetOption(external['name']+'-includes')
        if 'lib-path' in configuredExternal and baseEnv.GetOption(external['name']+'-libraries'):
            configuredExternal['lib-path'] = baseEnv.GetOption(external['name']+'-libraries')
        if 'bin-path' in configuredExternal and baseEnv.GetOption(external['name']+'-binaries'):
            configuredExternal['bin-path'] = baseEnv.GetOption(external['name']+'-binaries')
    return configuredExternal

def replace(string, variable, substitute):
    if isinstance(string, str):
        return string.replace(variable, substitute)
    if isinstance(string, list):
        return [ x.replace(variable, substitute) for x in string]
    return string

def substituteVars(name, version, configuredExternal):
    #Substitue variables
    for section in configuredExternal:
        if 'lib-path' in configuredExternal:
            configuredExternal[section] = replace(configuredExternal[section], '$LIB-PATH', configuredExternal['lib-path'])
        if 'bin-path' in configuredExternal:
            configuredExternal[section] = replace(configuredExternal[section], '$BIN-PATH', configuredExternal['bin-path'])
        if baseEnv.GetOption('GLAST-EXT'):
            configuredExternal[section] = replace(configuredExternal[section], '$GLAST_EXT', baseEnv.GetOption('GLAST-EXT'))
        configuredExternal[section] = replace(configuredExternal[section], '$COMPILER', compilerName)
        configuredExternal[section] = replace(configuredExternal[section], '$VERSION', version)
        configuredExternal[section] = replace(configuredExternal[section], '$NAME', name)
    return configuredExternal

def setupEnvironment(configuredExternal):
    #Add Paths to base environment
    #Also for Windows only fill extlibSet data structure  (jrb addition)
    extlibSet = set()
    if 'include-path' in configuredExternal:
        baseEnv.AppendUnique(CPPPATH = [configuredExternal['include-path']])
    if 'lib-path' in configuredExternal:
        baseEnv.AppendUnique(LIBPATH = [configuredExternal['lib-path']])
    if 'bin-path' in configuredExternal:
        baseEnv.PrependUnique(PATH = [configuredExternal['bin-path']])
    if 'ld-path' in configuredExternal:
        baseEnv.AppendUnique(WRAPPERLIBS = [configuredExternal['ld-path']])

    #Add library groups to base environment
    if 'libraries' in configuredExternal:
        for libGroup in configuredExternal['libraries']:
            baseEnv[libGroup] = configuredExternal['libraries'][libGroup]
            # (jrb) Used to figure out dependencies in project/sln files
            if baseEnv['PLATFORM'] == 'win32':
                for xlib in baseEnv[libGroup]:
                    extlibSet.add(xlib)

    #Add CPP defines to base environment
    if 'cpp-defines' in configuredExternal:
        for define in configuredExternal['cpp-defines']:
            baseEnv.AppendUnique(CPPDEFINES = [define])

    if baseEnv['PLATFORM'] == 'win32':
        baseEnv['extlibSet'] = extlibSet

                        
def checkEnvironment(configuredExternal):
    conf = baseEnv.Clone().Configure()
    if 'includes' in configuredExternal:
        for include in configuredExternal['includes']:
            if not conf.CheckCXXHeader(include):
                print 'Unable to find a header file for '+configuredExternal['name']+'. See config.log for more details.'
                Exit(1)
    if 'libraries' in configuredExternal:
        for libGroup in configuredExternal['libraries']:
            for library in configuredExternal['libraries'][libGroup][::-1]:
                if not conf.CheckLib(library, language='C++'):
                    print 'Unable to find a library for '+configuredExternal['name']+'. See config.log for more details.'
                    Exit(1)
    conf.Finish()
    
def setupRoot(configuredExternal):
    if 'lib-path' in configuredExternal:
        baseEnv.AppendENVPath('LD_LIBRARY_PATH', [configuredExternal['lib-path']])
    if 'dylib-path' in configuredExternal:
        baseEnv.AppendENVPath('DYLD_LIBRARY_PATH', [configuredExternal['dylib-path']])
    baseEnv.AppendENVPath('ROOTSYS', [os.path.normpath(os.path.join(configuredExternal['include-path'], '..'))])
    baseEnv.AppendENVPath('PATH', [configuredExternal['bin-path']])

    def rootcintEmitter(target, source, env):
        target.append(str(target[0]).replace('.cxx','')+".h")
        return target, source
    def rootcintGenerator(source,target,env,for_signature):
        buildlocation = Dir(str(target[0].dir)+'/..')
        root_headers = ''
        for header in env['includes']:
            root_headers += ' -I'+str(Dir(header))
        sources = ''
        for file in source:
            sources += ' '+str(buildlocation.rel_path(file))
        execute = 'cd '+os.path.join("${TARGET.dir}","..")+ ' && '
        execute += os.path.join(configuredExternal['bin-path'], 'rootcint')
        execute += ' -f '
        execute += str(buildlocation.rel_path(target[0]))
        execute += ' -c'
        execute += root_headers
        execute += sources
        return execute
    rootBuilder = Builder(generator = rootcintGenerator, emitter = rootcintEmitter, suffix = '.cxx')
    baseEnv.Append(BUILDERS = { 'Rootcint' : rootBuilder })
    if baseEnv['PLATFORM'] == "win32":
        def defGenerator(target, source, env, for_signature):
            return "/def:"+os.path.splitext(str(target[0]))[0]+".def"
        baseEnv['DEFGENERATOR'] = defGenerator
        baseEnv['SHLINKCOM'] = [os.path.join(externalLibraries['ROOT']['bin-path'], "bindexplib.exe") + " -o ${TARGET.base}.def ${TARGET.file} $SOURCES"] + baseEnv['SHLINKCOM']
        baseEnv['SHLINKCOM'].list[1].cmd_list = baseEnv['SHLINKCOM'].list[1].cmd_list.rstrip('" )}')
        baseEnv['SHLINKCOM'].list[1].cmd_list += " $DEFGENERATOR\")}"

def setupSwig(configuredExternal):
    baseEnv.PrependENVPath('PATH', [configuredExternal['bin-path']])
    baseEnv.Tool('swig')
    if baseEnv['PLATFORM'] == 'win32':
        baseEnv['SWIGEXEPATH'] = externalLibraries['swig']['bin-path']
        baseEnv['SWIG_LIB'] = externalLibraries['swig']['share-path']

    baseEnv.AppendUnique(SWIGPATH = [baseEnv['CPPPATH'], os.path.join(configuredExternal['share-path'], 'python'),
                                     configuredExternal['share-path'], baseEnv['INCDIR'], '.'])
    baseEnv.AppendUnique(SWIGFLAGS = ['-w401', '-w402', '-w503', '-w362', '-w389', '-w509', '-python', '-c++'])

#determine the compiler name to use
compilerName = baseEnv['COMPILERNAME']

#This variable holds are external library hashes once they are fully configured
configuredExternals = []

#Set everything up
for external in usedExternals:
    configuredExternal = getExternal(external['name'], external['iversion'], compilerName)
    configuredExternal = setupOptions(external['name'], configuredExternal)
    configuredExternal = substituteVars(external['name'], configuredExternal['version'], configuredExternal)
    setupEnvironment(configuredExternal)
    if external['name'] == 'ROOT':
        setupRoot(configuredExternal)
    if external['name'] == 'swig':
        setupSwig(configuredExternal)
    configuredExternal['name'] = external['name']
    configuredExternals.append(configuredExternal)

#Check if all external libraries exist
for configuredExternal in configuredExternals:
    if not baseEnv.GetOption('help') and not baseEnv.GetOption('clean'):
        checkEnvironment(configuredExternal)

#If in RM mode print out all the external library ld paths
if baseEnv.GetOption('rm'):
    print "scons: printing external libraries"
    for configuredExternal in configuredExternals:
        if 'ld-path' in configuredExternal:
            print configuredExternal['name']+' '+configuredExternal['version']+' '+configuredExternal['ld-path'].replace(baseEnv.GetOption('GLAST-EXT'), '$GLAST_EXT')
    print "scons: done printing external libraries"
    
